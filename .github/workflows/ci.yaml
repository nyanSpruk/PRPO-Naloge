name: Build and test

on: 
  push: 
    branches: ["feature/*"]
  pull_request:
    branches: ["main", "dev"]

jobs:
  build:
    # Different build strategies, different os and versions
    strategy:
      matrix: 
        os: [ubuntu-latest]
        version: [17]

    # OS for vm to run on
    runs-on: ${{ matrix.os }}

    # Setup local database
    services:
      postgres:
        container_name: postgres-jdbc
        image: postgres:13 
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: uporabniki
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # CI job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.1.0

      - name: Set up JDK 17
        uses: actions/setup-java@v3.6.0
        with:
          java-version: ${{ matrix.version }}
          distribution: 'adopt'

      - name: Setup local database
        run: |
          docker exec -it postgres-jdbc psql -U postgres -w postgres -c \
           'CREATE TABLE public.uporabnik (
              id serial NOT NULL,
              ime varchar NULL,
              priimek varchar NULL,
              uporabniskoime varchar NULL,
              CONSTRAINT uporabnik_pk PRIMARY KEY (id));'
          docker exec -it postgres-jdbc psql -U postgres -w postgres -c \
            "INSERT INTO uporabnik (ime, priimek, uporabniskoime) VALUES ('janez', 'novak', 'janezn')"
      - name: Build project with Maven
        run: mvn -f hello-world/pom.xml install -DskipTests
      - name: Run server locally
        run: |
          ARTIFACT_ID=$(cat ./hello-world/pom.xml | grep -oPm1 "(?<=<artifactId>)[^<]+")
          VERSION=$(cat ./hello-world/pom.xml | grep -oPm1 "(?<=<version>)[^<]+")
          java -jar ./hello-world/target/${ARTIFACT_ID}-${VERSION}.jar
      - name: Run tests
        run: mvn surefire:test
